package com.ksu.team.temperatureTrackingApp;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.graphics.Color;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.TextView;

import com.jjoe64.graphview.CustomLabelFormatter;
import com.jjoe64.graphview.GraphView;
import com.jjoe64.graphview.GraphViewSeries;
import com.jjoe64.graphview.GraphViewStyle;
import com.jjoe64.graphview.LineGraphView;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

public class TemperatureActivity extends Activity {

    //private static final String TAG_IP_ADDRESS="10.0.2.2";

    private GraphViewSeries temperatureDataGraph = null;
    GraphView graphView = null;
    public ProgressBar progressBar;
    public TextView txtLoading;
    int lastResultIndex = 0;
    //final long oneHour = 60 * 60 * 1000;


    public static double myFloor(double num, int multipleOf) {
        return ( Math.floor(num / multipleOf) * multipleOf );
    }
    public static double myCeil (double num, int multipleOf) {
        return ( Math.ceil(num / multipleOf) * multipleOf );
    }

    public void setCustomVerticalIntervals(ArrayList<TempReading> temperatures) {
        Comparator<TempReading> customTemperatureComparator = new Comparator<TempReading>() {
            @Override
            public int compare(TempReading temp1, TempReading temp2) {
                if (temp1.getTemp() > temp2.getTemp())
                    return 1;
                else if (temp1.getTemp() == temp2.getTemp())
                    return 0;
                else
                    return -1;
            }
        };
        double max = Collections.max(temperatures, customTemperatureComparator).getTemp();
        double min = Collections.min(temperatures, customTemperatureComparator).getTemp();

        int interval;
        int rawRange = (int) (max - min);

        if (rawRange <= 5) {
            interval = 1;
        } else
        if (rawRange <= 10) {
            interval = 2;
        } else
        if (rawRange <= 80) {
            interval = 5; // increment of 5 between each label
        } else
            interval = 10;

        int minValue = (int) myFloor(min, interval);
        int maxValue = (int) myCeil(max, interval);

        int range = maxValue - minValue;

        // set manual bounds
        ((LineGraphView) graphView).setManualYAxisBounds(maxValue, minValue);
        // indicate number of vertical labels
        ((LineGraphView) graphView).getGraphViewStyle().setNumVerticalLabels(range / interval + 1);

    }

    public void setCustomHorizontalIntervals(ArrayList<TempReading> temperatures) {
        Comparator<TempReading> customComparator =
                new Comparator<TempReading>() {
                    @Override
                    public int compare(TempReading temp1, TempReading temp2) {
                        if (temp1.getDate().after(temp2.getDate()))
                            return 1;
                        else if (temp1.getDate().before(temp2.getDate()))
                            return -1;
                        else
                            return 0;
                    }};

        Calendar maxCalendarDate = new GregorianCalendar();
        maxCalendarDate.setTime(Collections.max(temperatures, customComparator).getDate());

        Calendar minCalendarDate = new GregorianCalendar();
        minCalendarDate.setTime(Collections.min(temperatures, customComparator).getDate());

        // search the interval between 2 horizontal labels
        int interval;
        int minHour = minCalendarDate.get(Calendar.HOUR_OF_DAY);
        int maxHour = maxCalendarDate.get(Calendar.HOUR_OF_DAY);
        int rawHourRange =  maxHour - minHour;

        if (rawHourRange == 0) {

            int minMinute = minCalendarDate.get(Calendar.MINUTE);
            int maxMinute = maxCalendarDate.get(Calendar.MINUTE);
            int rawMinutesRange = maxMinute - minMinute;
            if (rawMinutesRange <= 15)
                interval = 5;
            else
                interval = 15;

            int minValue = (int) myFloor(minMinute, interval);
            int maxValue = (int) myCeil(maxMinute, interval);
            int minutesRange = maxValue - minValue;
            ((LineGraphView) graphView).getGraphViewStyle().setNumHorizontalLabels(minutesRange / interval + 1);
            Log.i("HourRangeTAG", minMinute+" "+maxMinute+" "+minValue+" "+maxValue);
        } else {
            if (rawHourRange <= 4)
                interval = 1;
            else if (rawHourRange <= 8)
                interval = 2;// 8 / 4
            else if (rawHourRange <= 16)
                interval = 4;// 16 / 4
            else
                interval = 6; // 24 / 4

            int minValue = (int) myFloor(minHour, interval);
            int maxValue = (int) myCeil(maxHour, interval);

            int hourRange = maxValue - minValue;

            ((LineGraphView) graphView).getGraphViewStyle().setNumHorizontalLabels(hourRange / interval + 1);
        }
    }

    public void setCustomIntervals () {
        ArrayList<TempReading> temperatures = DateReadingsUtil.getReadingsByDay().get(DateReadingsUtil.getFormattedDate(DateReadingsUtil.getCurrentDate()));

        //Custom vertical Axis
        setCustomVerticalIntervals(temperatures);

        //Custom horizontal Axis
        setCustomHorizontalIntervals(temperatures);
    }

    public void displayGraph(GraphViewSeries temperatureReadings) {
        //((LineGraphView) graphView).setScrollable(true);
        ((LineGraphView) graphView).setDrawDataPoints(true);
        ((LineGraphView) graphView).setDataPointsRadius(10f);

        graphView.getGraphViewStyle().setGridColor(Color.GRAY);
        //graphView.getGraphViewStyle().setGridStyle(GraphViewStyle.GridStyle.NONE);
        graphView.getGraphViewStyle().setGridStyle(GraphViewStyle.GridStyle.BOTH);
        graphView.getGraphViewStyle().setHorizontalLabelsColor(Color.WHITE);
        graphView.getGraphViewStyle().setVerticalLabelsColor(Color.WHITE);

        graphView.addSeries(temperatureReadings); // data

        graphView.setCustomLabelFormatter(new CustomLabelFormatter() {
            @Override
            public String formatLabel(double value, boolean isValueX) {
                if (isValueX) {
                    Date d = new Date((long) value);
                    String hour = DateReadingsUtil.getFormattedDate(d, "HH:mm a");

                    return hour;
                } else {
                    return ((int) value) + " F";
                }
            }
        });

        LinearLayout layout = (LinearLayout) findViewById(R.id.temperatureGraph);
        layout.addView(graphView);
    }

    public void displayWarning () {
        new AlertDialog.Builder(this)
                .setTitle("No data available")
                .setMessage("Please verify connection to Raspberry Pi")
                .setPositiveButton("Retry", new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        // do something
                    }
                }).setIcon(android.R.drawable.ic_dialog_alert)
                .show();
    }

    public boolean updateGraph() {
        String day = DateReadingsUtil.getFormattedDate(DateReadingsUtil.getCurrentDate());
        boolean b = false;

        ArrayList<TempReading> aux = DateReadingsUtil.getReadingsByDay().get(day);
        temperatureDataGraph.resetData(new GraphView.GraphViewData [] {});
        if (aux != null) {
            for (TempReading tr : aux) {
                long time = tr.getDate().getTime();
                float temperature = tr.getTemp();
                try {
                    temperatureDataGraph.appendData(new TemperatureDataModel(time, temperature), true, 1000);
                } catch (Exception e) {
                    Log.i("ExceptionTAG", e.toString());
                }

            }
            setCustomIntervals();
            b = true;
        }

        return b;
    }

    public void updateTitle() {
        String day = DateReadingsUtil.getFormattedDate(DateReadingsUtil.getCurrentDate());

        //updates title of the graph
        graphView.setTitle(day);
    }

    public void displayButtons() {
        Button prevButton = new Button(this);
        prevButton.setText("Previous");
        Button nextButton = new Button(this);
        nextButton.setText("Next");

        prevButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Date date = new Date();

                date.setTime(DateReadingsUtil.getCurrentDate().getTime());

                Date res=DateReadingsUtil.getPreviousAvailable(date);
                if(res!=null){
                    DateReadingsUtil.setCurrentDate(res);
                    updateGraph();
                    updateTitle();
                }
                else if(res==null){
                   // displayWarning();
                }

            }
        });

        nextButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Date date = new Date();

                date.setTime(DateReadingsUtil.getCurrentDate().getTime());

                Date res=DateReadingsUtil.getNextAvailableDate(date);
                if(res!=null){
                    DateReadingsUtil.setCurrentDate(res);
                    updateGraph();
                    updateTitle();
                }
                else if(res==null){
                    // displayWarning();
                }
            }
        });

        LinearLayout layout = (LinearLayout) findViewById(R.id.buttons);
        layout.addView(prevButton);
        layout.addView(nextButton);
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_temperature);

        graphView = new LineGraphView(this, "");
        ArrayList<TempReading> result = new ArrayList<TempReading>();
        temperatureDataGraph = new GraphViewSeries(new GraphView.GraphViewData[]{});

        String ip_address;
        if (savedInstanceState == null) {
            Bundle extras = getIntent().getExtras();
            if(extras == null) {
                ip_address= null;
            } else {
                ip_address= extras.getString("IP_ADDRESS");
            }
        } else {
            ip_address= (String) savedInstanceState.getSerializable("IP_ADDRESS");
        }

       // currentDay;
        this.progressBar= (ProgressBar) findViewById(R.id.progress_bar);
        this.txtLoading= (TextView) findViewById(R.id.loading_text);

        JsonTask task=new JsonTask(this);
        task.execute("http://"+ip_address+":8080/RaspberryPi/Temperature.json");

    }


    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.temperature, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();
        if (id == R.id.action_settings) {
            return true;
        }
        return super.onOptionsItemSelected(item);
    }

    public List<TempReading> averageToUnits(List<TempReading> result, String format_str ){

        ArrayList<TempReading> outputList=new ArrayList<TempReading>();

        LinkedHashMap<String,List<TempReading>> list=new LinkedHashMap<String, List<TempReading>>();

        for(TempReading reading: result){
            String key=DateReadingsUtil.getFormattedDate(reading.getDate(),format_str);
            if(list.containsKey(key)) {
                list.get(key).add(reading);
            }
            else{
                List<TempReading> newList=new ArrayList<TempReading>();
                newList.add(reading);
                list.put(key,newList);
            }
        }
        for(Map.Entry<String,List<TempReading>> entry:list.entrySet()){

            List<TempReading> values=entry.getValue();

            int id=1;
            float sum=0;
            for(TempReading reading:values){
                sum+=reading.getTemp();
            }
            float avg=sum/values.size();

            try {

                SimpleDateFormat format = new SimpleDateFormat(format_str);
                outputList.add(new TempReading(id, avg, format.parse(entry.getKey())));
            }
            catch(Exception e){
                e.printStackTrace();
            }

            id++;
        }

        return outputList;

    }

    public List<TempReading> roundTo15Minutes(List<TempReading> result){

        for(TempReading reading: result) {

            Date date = reading.getDate();
            Calendar calendar = Calendar.getInstance();
            calendar.setTime(date);

            int unroundedMinutes = calendar.get(Calendar.MINUTE);
            int mod = unroundedMinutes % 15;
            calendar.add(Calendar.MINUTE, mod < 8 ? -mod : (15 - mod));
            calendar.set(Calendar.SECOND, 0);
            calendar.set(Calendar.MILLISECOND, 0);

            reading.setDate(calendar.getTime());

        }
        return result;


    }


    public void onTempResult(List<TempReading> result){


        result=roundTo15Minutes(result);
        result=averageToUnits(result, DateReadingsUtil.FORMAT_BY_MINUTE);

        Date d=null;

        while (lastResultIndex < result.size()) {
            TempReading tr = result.get(lastResultIndex++);
            d=tr.getDate();
            DateReadingsUtil.buildReadingsByDay(tr);
        }


        DateReadingsUtil.setCurrentDate(d);

        boolean validDataAvailable = false;
        validDataAvailable = updateGraph();

        if (validDataAvailable) {
            displayGraph(temperatureDataGraph);
            displayButtons();
            updateTitle();
        } else
            displayWarning();

        progressBar.setVisibility(View.INVISIBLE);
        txtLoading.setVisibility(View.INVISIBLE);

    }

    public void setProgressMessage(final String s){

        txtLoading.post(new Runnable() {
            public void run() {
                txtLoading.setText(s);
            }
        });
        //this.txtLoading.setText(s);
    }

}
