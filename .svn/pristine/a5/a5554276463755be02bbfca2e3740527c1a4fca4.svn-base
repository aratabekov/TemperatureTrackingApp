package com.ksu.team.temperatureTrackingApp.utils;

import android.util.Log;

import com.ksu.team.temperatureTrackingApp.TempReading;
import com.ksu.team.temperatureTrackingApp.TemperatureActivity;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

/**
 * Created by Marcel on 30-Oct-14.
 */
public class DateReadingsUtil {
    public static final String FORMAT_BY_DAY = "dd MMM yyyy - EEEE";
    public static final String FORMAT_BY_MINUTE="dd MMM yyyy - HH:mm";
    public static final String FORMAT_BY_HOUR="dd MMM yyyy - HH";

    private static LinkedHashMap<String, ArrayList<TempReading>> readingsByDay = new LinkedHashMap<String, ArrayList<TempReading>>();
    private static Date currentDate;

    public static ArrayList<TempReading> getReadingsByDay(String day, TemperatureActivity.Scale scale) {
        ArrayList<TempReading> readings = readingsByDay.get(day);
        ArrayList<TempReading> readingsC = null;

        if (scale == TemperatureActivity.Scale.C) {
            readingsC = new ArrayList<TempReading> (readings.size());
            for (TempReading tr : readings) {
                float temperatureC = ((tr.getTemp() - 32) * 5) / 9;

                TempReading trC = null;
                try {
                    trC = (TempReading) tr.clone();
                } catch (CloneNotSupportedException e) {
                    e.printStackTrace();
                }

                trC.setTemp(temperatureC);
                readingsC.add(trC);
            }

            return readingsC;
        }

        return readings;
    }


    public static Date getCurrentDate() {
        return currentDate;
    }

    public static void setCurrentDate(Date date) {
        currentDate = date;
    }

    public static Date addOneDay(Date date) {
        Calendar now=Calendar.getInstance();
        now.setTime(date);

        now.add(Calendar.DAY_OF_YEAR, 1);

        return now.getTime();
    }

    public static void buildReadingsByDay(TempReading tr) {
        String day = getFormattedDate(tr.getDate(), FORMAT_BY_DAY);
        ArrayList<TempReading> aux = null;

        if (readingsByDay.containsKey(day))
            aux = readingsByDay.get(day);
        else
            aux = new ArrayList<TempReading>();

        aux.add(tr);
        readingsByDay.put(day, aux);
    }

    public static String getFormattedDate(Date date, SimpleDateFormat format) {

        return format.format(date);
    }
    public static String getFormattedDate(Date date, String format_str) {
        SimpleDateFormat format = new SimpleDateFormat(format_str);

        return format.format(date);
    }

    public static boolean readingExists(String dateFormatted) {
        boolean b = false;

        if (readingsByDay.containsKey(dateFormatted))
            b = true;

        return b;
    }

    public static Date getPreviousAvailableDate(){
        Date prev=null;
        try
        {
            Iterator <Map.Entry <String,ArrayList<TempReading>>> it=readingsByDay.entrySet().iterator();
            while(it.hasNext() ){

                Map.Entry <String,ArrayList<TempReading>> entry=it.next();

                SimpleDateFormat format = new SimpleDateFormat(FORMAT_BY_DAY);
                Date current=format.parse(entry.getKey());

                if(entry.getKey().compareTo(getFormattedDate(currentDate, FORMAT_BY_DAY))==0){
                    //break;
                    Log.d("previous returning",current.toString());

                    break;
                }
                prev=current;
                Log.d("previous",current.toString());
            }
        }
        catch (Exception e){
            Log.d("just checking catch",e.toString());
            e.printStackTrace();

        }

        return prev;
    }

    public static Date getNextAvailableDate(){
        Date res=null;
        try
        {
            Iterator <Map.Entry <String,ArrayList<TempReading>>> it=readingsByDay.entrySet().iterator();
            while(it.hasNext() ){

                Map.Entry <String,ArrayList<TempReading>> entry=it.next();

                if(entry.getKey().compareTo(getFormattedDate(currentDate, FORMAT_BY_DAY))==0){
                    //break;
                    //Log.d("previous returning",current.toString());
                    if(it.hasNext()){
                        Map.Entry <String,ArrayList<TempReading>> next=it.next();
                        SimpleDateFormat format = new SimpleDateFormat(FORMAT_BY_DAY);
                        res=format.parse(next.getKey());
                        break;

                    }

                }


               // Log.d("previous",current.toString());
            }
        }
        catch (Exception e){
            Log.d("just checking catch",e.toString());
            e.printStackTrace();

        }

        return res;
    }


    public static List<TempReading> averageToUnits(List<TempReading> result, String format_str ){

        ArrayList<TempReading> outputList=new ArrayList<TempReading>();

        LinkedHashMap<String,List<TempReading>> list=new LinkedHashMap<String, List<TempReading>>();

        for(TempReading reading: result){
            String key=DateReadingsUtil.getFormattedDate(reading.getDate(),format_str);
            if(list.containsKey(key)) {
                list.get(key).add(reading);
            }
            else{
                List<TempReading> newList=new ArrayList<TempReading>();
                newList.add(reading);
                list.put(key,newList);
            }
        }
        for(Map.Entry<String,List<TempReading>> entry:list.entrySet()){

            List<TempReading> values=entry.getValue();

            int id=1;
            float sum=0;
            for(TempReading reading:values){
                sum+=reading.getTemp();
            }
            float avg=sum/values.size();

            try {

                SimpleDateFormat format = new SimpleDateFormat(format_str);
                outputList.add(new TempReading(id, avg, format.parse(entry.getKey())));
            }
            catch(Exception e){
                e.printStackTrace();
            }

            id++;
        }

        return outputList;

    }

    public static List<TempReading> roundToXMinutes(List<TempReading> result, int minutes, String format) {

        for (TempReading reading : result) {

            Date date = reading.getDate();
            Calendar calendar = Calendar.getInstance();
            calendar.setTime(date);

            int unroundedMinutes = calendar.get(Calendar.MINUTE);
            int mod = unroundedMinutes % minutes;
            int half = (int) Math.floor(minutes / 2) + 1;
            calendar.add(Calendar.MINUTE, mod < half ? (- mod) : (minutes - mod));
            calendar.set(Calendar.SECOND, 0);
            calendar.set(Calendar.MILLISECOND, 0);

            reading.setDate(calendar.getTime());

        }

        result = averageToUnits(result, format);

        return result;

    }


}
